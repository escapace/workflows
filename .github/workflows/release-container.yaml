on:
  workflow_call:
    inputs:
      annotations:
        description: 'list of annotation to set to the image'
        required: false
        type: string
      artifact-name:
        description: 'artifact name'
        required: true
        type: string
      build-args:
        description: 'list of build-time variables'
        required: false
        type: string
      context:
        description: "build's context is tarball path"
        required: true
        type: string
      enable-cosign:
        default: false
        description: 'sign the resulting docker image(s)'
        required: false
        type: boolean
      enable-push:
        default: false
        description: 'push is a shorthand for --output=type=registry'
        required: false
        type: boolean
      enable-test:
        default: true
        description: 'run your tests when building the image'
        required: false
        type: boolean
      file:
        default: Dockerfile
        description: 'path to the dockerfile'
        type: string
      labels:
        description: 'list of metadata for an image'
        required: false
        type: string
      platforms:
        description: 'list of target platforms for build'
        required: false
        type: string
      tags:
        description: 'list of tags'
        required: false
        type: string
    outputs:
      digest:
        description: 'image digest'
        value: ${{ jobs.main.outputs.digest }}
      image-id:
        description: 'image id'
        value: ${{ jobs.main.outputs.image-id }}
      metadata:
        description: 'build result metadata'
        value: ${{ jobs.main.outputs.metadata }}

# permissions:
#   packages: write
#   id-token: write

jobs:
  main:
    outputs:
      digest: ${{ steps.build-and-push.outputs.digest }}
      image-id: ${{ steps.build-and-push.outputs.imageid }}
      metadata: ${{ steps.build-and-push.outputs.metadata }}
    runs-on: ubuntu-latest
    steps:
      - name: download context archive
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
      - name: docker login
        uses: docker/login-action@v3
        with:
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          username: ${{ github.actor }}
      - name: setup qemu
        uses: docker/setup-qemu-action@v3
      - id: buildx
        name: docker buildx
        uses: docker/setup-buildx-action@v3
      - name: available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: extract context
        run: |
          readarray -t array < <(find . -type f -name '*.tgz')
          tar -xf ${{ inputs.context }}
          printf '%s\n' "${array[@]}" | xargs rm -f
        shell: bash
      - id: dockerfile
        run: |
          targets=$(sed -n 's/^FROM[[:space:]]\+[^ ]\+[[:space:]]\+[aA][sS][[:space:]]\+\([^ ]\+\)$/\1/p' ${{ inputs.file }} | jq -R -s '{"targets": split("\n")[:-1]}')

          if echo "$targets" | jq -e '.targets | index("test")' > /dev/null; then
            echo "test=true" >> $GITHUB_OUTPUT
          else
            echo "test=false" >> $GITHUB_OUTPUT
          fi
      - id: test
        if: fromJSON(steps.dockerfile.outputs.test) == true && inputs.enable-test == true
        name: test
        uses: docker/build-push-action@v5
        with:
          annotations: ${{ inputs.annotations }}
          build-args: |
            CONTAINER_TEST=true
            ${{ inputs.build-args }}
          cache-from: |
            type=gha
          cache-to: |
            type=gha,mode=max
            type=local,dest=/tmp/.buildx-cache,mode=max
          context: .
          file: ${{ inputs.file }}
          labels: ${{ inputs.labels }}
          platforms: ${{ inputs.platforms }}
          provenance: false
          push: false
          sbom: false
          tags: ${{ inputs.tags }}
          target: test
      - id: push
        if: inputs.enable-push == true
        name: (re)build and push
        uses: docker/build-push-action@v5
        with:
          annotations: ${{ inputs.annotations }}
          build-args: ${{ inputs.build-args }}
          cache-from: |
            type=gha
            type=local,src=/tmp/.buildx-cache
          cache-to: |
            type=gha,mode=max
          context: .
          file: ${{ inputs.file }}
          labels: ${{ inputs.labels }}
          platforms: ${{ inputs.platforms }}
          provenance: false
          push: ${{ inputs.enable-push }}
          sbom: false
          tags: ${{ inputs.tags }}
      - if: inputs.enable-cosign == true && inputs.enable-push == true
        name: install cosign
        uses: sigstore/cosign-installer@v3.7.0
        # with:
        #   cosign-release: 'v2.1.1'
      - env:
          DIGEST: ${{ steps.push.outputs.digest }}
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ inputs.tags }}
        if: inputs.enable-cosign == true && inputs.enable-push == true
        name: sign the docker image
        run: |
          echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
      # Adapted from https://docs.docker.com/build/ci/github-actions/multi-platform/
      - env:
          ANNOTATIONS: ${{ inputs.annotations }}
          DIGEST: ${{ steps.push.outputs.digest }}
          TAGS: ${{ inputs.tags }}
        name: create manifest list and push
        run: |
          readarray -t lines <<< "$ANNOTATIONS"; annotations=(); for line in "${lines[@]}"; do annotations+=(--annotation "$line"); done
          readarray -t lines <<< "$TAGS"; tags=(); for line in "${lines[@]}"; do tags+=(-t "$line"); done
          docker buildx imagetools create \
          "${annotations[@]}" "${tags[@]}" "$GITHUB_REPOSITORY":$DIGEST
