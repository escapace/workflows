on:
  workflow_call:
    inputs:
      annotations-levels:
        default: index
        required: false
        type: string
      artifact-name:
        default: package
        description: 'artifact name'
        required: false
        type: string
      build-args:
        description: 'list of build-time variables'
        required: false
        type: string
      enable-cosign:
        default: false
        description: 'sign the resulting docker image(s)'
        required: false
        type: boolean
      enable-push:
        default: false
        description: 'push is a shorthand for --output=type=registry'
        required: false
        type: boolean
      enable-test:
        default: true
        description: 'run your tests when building the image'
        required: false
        type: boolean
      latest:
        description: 'add the latest tag'
        required: true
        type: boolean
      platforms:
        description: 'list of target platforms for build'
        required: false
        type: string
      prerelease:
        description: 'whether it is a prerelease'
        required: true
        type: boolean
      version:
        required: true
        type: string
    # outputs:
    #   digest:
    #     description: 'image digest'
    #     value: ${{ jobs.main.outputs.digest }}
    #   image-id:
    #     description: 'image id'
    #     value: ${{ jobs.main.outputs.image-id }}
    #   metadata:
    #     description: 'build result metadata'
    #     value: ${{ jobs.main.outputs.metadata }}

# permissions:
#   packages: write
#   id-token: write

# TODO: BUILDKIT_MULTI_PLATFORM

jobs:
  context:
    runs-on: ubuntu-latest
    outputs:
      archive: ${{ steps.context.outputs.archive }}
      packages: ${{ steps.context.outputs.packages }}
      platforms: ${{ steps.context.outputs.platforms }}
    steps:
      - name: download context archive
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
      - name: extract context archive
        id: context
        shell: bash
        env:
          PLATFORMS: ${{ inputs.platforms }}
        run: |
          platforms="$(echo "${PLATFORMS}" | jq -c -R 'split(",") | map(gsub("^[[:space:]]+|[[:space:]]+$"; ""))')"

          echo "platforms=${platforms}" >> "$GITHUB_OUTPUT"

          archive=""

          readarray -t archives < <(find "." -type f -name '*.tgz' -not -path '**/node_modules/**')

          while read -d '' -r file; do
            if tar -axOf "${file}" package/package.json package/pnpm-workspace.yaml &>/dev/null; then
              archive="${file}"
            fi
          done < <(find "." -type f -name '*.tgz' -not -path '**/node_modules/**' -print0 2>/dev/null)

          if [[ "${archive}" == "" ]]
          then
            while read -d '' -r file; do
              if [[ "$(tar -axOf "${file}" package/package.json | jq -r 'if .scripts["container:build"] | type == "string" then true else false end')" == "true" ]]; then
                archive="${file}"
              fi
            done < <(find "." -type f -name '*.tgz' -not -path '**/node_modules/**' -print0 2>/dev/null)
          fi

          echo "archive=${archive}" >> "$GITHUB_OUTPUT"

          tar -axf "${archive}"
          printf '%s\n' "${archives[@]}" | xargs rm -f

          declare -A packages=()

          while read -d '' -r file; do
            directory="$(dirname "$file")"

            if [[ -f "${directory}/package.json" &&
              -f "${directory}/Dockerfile" &&
              "$(jq -r 'if .scripts["container:build"] | type == "string" then true else false end' "$directory/package.json")" == "true" &&
              "$(jq -r 'if has("private") then .private else false end' "$directory/package.json")" == "true" &&
              "$(jq -r 'if .name | type == "string" and startswith("@container/") then true else false end' "$directory/package.json")" == "true" ]]; then
              name="$(jq -r '.name | sub("^@container/" ; "")' "${directory}/package.json")"
              dockerfile="${directory}/Dockerfile"
              packages["${name}"]="${dockerfile}"
            fi
          done < <(find "." -type f -name 'package.json' -not -path '**/node_modules/**' -print0 2>/dev/null)

          options="$(for i in "${!packages[@]}"; do echo "$i" && echo "${packages[$i]}"; done | jq -c -n -R 'reduce inputs as $i ([]; . + [[ $i, input ]]) | map({ name: .[0], dockerfile: .[1] } | tostring)')"

          echo "packages=${options}" >>"$GITHUB_OUTPUT"

  main:
    name: ${{ fromJSON(matrix.package).name }} ${{ matrix.platform }}
    needs:
      - context
    runs-on: ubuntu-latest
    strategy:
      matrix:
        archive:
          - ${{ needs.context.outputs.archive }}
        package: ${{ fromJSON(needs.context.outputs.packages) }}
        platform: ${{ fromJSON(needs.context.outputs.platforms) }}
    outputs:
      digest: ${{ steps.build-and-push.outputs.digest }}
      image-id: ${{ steps.build-and-push.outputs.imageid }}
      metadata: ${{ steps.build-and-push.outputs.metadata }}
    steps:
      - name: context
        id: context
        env:
          ARCHIVE: ${{ matrix.archive }}
          DOCKERFILE: ${{ fromJSON(matrix.package).dockerfile }}
          NAME: ${{ fromJSON(matrix.package).name }}
          PLATFORM: ${{ matrix.platform }}
          REPOSITORY_OWNER: ${{ github.repository_owner	}}
        run: |
          # platform pair (replace / with -)
          echo "platform-with-dash=${PLATFORM//\//-}" >> "$GITHUB_OUTPUT"
          echo "name=${NAME}" >> "$GITHUB_OUTPUT"
          echo "dockerfile=${DOCKERFILE}" >> "$GITHUB_OUTPUT"
          echo "archive=${ARCHIVE}" >> "$GITHUB_OUTPUT"
          echo "platform=${PLATFORM}" >> "$GITHUB_OUTPUT"
          echo "os=${PLATFORM%%/*}" >> "$GITHUB_OUTPUT"
          echo "arch=${PLATFORM#*/}" >> "$GITHUB_OUTPUT"
          echo "image=ghcr.io/${REPOSITORY_OWNER}/${NAME}" >> "$GITHUB_OUTPUT"
          echo "cache-key=${NAME}-${PLATFORM//\//-}" >> "$GITHUB_OUTPUT"
      - name: container metadata
        id: container-metadata
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=false
            prefix=
            suffix=
          images: ${{ steps.context.outputs.image }}
          tags: |
            type=match,pattern=v(.*),group=1,value=v${{ inputs.version }}
            type=match,pattern=v(\d.\d),group=1,enable=${{ startsWith(inputs.version, '0') == false && inputs.prerelease == false }},value=v${{ inputs.version }}
            type=match,pattern=v(\d),group=1,enable=${{ startsWith(inputs.version, '0') == false && inputs.prerelease == false }},value=v${{ inputs.version }}
            type=raw,value=latest,enable=${{ inputs.latest && inputs.prerelease == false }}
      - name: remove the checkout
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          rm -rf "${WORKSPACE}"
          mkdir -p "${WORKSPACE}"
      - name: download context archive
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
      - name: extract context archive
        shell: bash
        env:
          ARCHIVE: ${{ steps.context.outputs.archive }}
        run: |
          readarray -t array < <(find . -type f -name '*.tgz')
          tar -xf "${ARCHIVE}"
          printf '%s\n' "${array[@]}" | xargs rm -f
      - name: docker login
        uses: docker/login-action@v3
        with:
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          username: ${{ github.actor }}
      - name: setup qemu
        uses: docker/setup-qemu-action@v3
      - name: docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: install dockerfile-tools
        uses: escapace/action-dockerfile-tools@v0.1.0
      - name: inspect dockerfile
        id: dockerfile
        shell: bash
        env:
          ARCH: ${{ steps.context.outputs.ARCH }}
          BUILD_ARGS: ${{ inputs.build-args }}
          DOCKERFILE: ${{ steps.context.outputs.dockerfile }}
          OS: ${{ steps.context.outputs.os }}
          PLATFORM: ${{ steps.context.outputs.platform }}
        run: |
          stages=$(dockerfile-tools list-stages --dockerfile "${DOCKERFILE}")

          if echo "$stages" | jq -e '.[] | select(. == "test")' > /dev/null; then
            echo "test=true" >> "$GITHUB_OUTPUT"
          else
            echo "test=false" >> "$GITHUB_OUTPUT"
          fi

          args=()
          args+=(--arg "TARGETPLATFORM=${PLATFORM}")
          args+=(--arg "TARGETOS=${OS}")
          args+=(--arg "TARGETARCH=${ARCH}")

          readarray -t lines <<< "$BUILD_ARGS"; for line in "${lines[@]}"; do args+=(--arg "$line"); done

          cache_map="$(dockerfile-tools list-cache-mounts --dockerfile "${DOCKERFILE}" "${args[@]}" | jq -c)"
          echo "cache-map=${cache_map}" >> "$GITHUB_OUTPUT"

          {
            echo 'cache-path<<EOF'
            echo "${cache_map}" | jq -r '. | keys | join("\n")'
            echo EOF
          } >> "$GITHUB_OUTPUT"
      - name: cache
        id: cache
        uses: actions/cache@v3
        with:
          key: cache-mounts-${{ steps.context.outputs.cache-key }}-${{ hashFiles(steps.context.outputs.dockerfile, '**/pnpm-lock.yaml', '**/uv.lock', '**/go.sum', '**/Cargo.lock') }}
          path: |
            ${{ steps.dockerfile.outputs.cache-path }}
          restore-keys: |
            cache-mounts-${{ steps.context.outputs.cache-key }}-
      - name: inject cache into docker
        uses: reproducible-containers/buildkit-cache-dance@61bd187f75f25d38e056fdd48506fac777c6ebec
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-map: ${{ steps.dockerfile.outputs.cache-map }}
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}
      - name: test
        if: fromJSON(steps.dockerfile.outputs.test) == true && inputs.enable-test == true
        id: test
        uses: docker/build-push-action@v5
        with:
          annotations: ${{ steps.container-metadata.outputs.annotations }}
          build-args: |
            CONTAINER_TEST=true
            ${{ inputs.build-args }}
          cache-from: |
            type=gha,scope=test-${{ steps.context.outputs.cache-key }}
          cache-to: |
            type=gha,scope=test-${{ steps.context.outputs.cache-key }}
          context: .
          file: ${{ steps.context.outputs.dockerfile }}
          labels: ${{ steps.container-metadata.outputs.labels }}
          platforms: ${{ steps.context.outputs.platform }}
          provenance: false
          push: false
          sbom: false
          tags: ${{ steps.container-metadata.outputs.tags }}
          target: test
      - name: (re)build and push
        if: inputs.enable-push == true
        id: push
        uses: docker/build-push-action@v5
        with:
          annotations: ${{ steps.container-metadata.outputs.annotations }}
          build-args: ${{ inputs.build-args }}
          cache-from: |
            type=gha,scope=${{ steps.context.outputs.cache-key }}
            type=gha,scope=test-${{ steps.context.outputs.cache-key }}
          cache-to: |
            type=gha,mode=max,scope=${{ steps.context.outputs.cache-key }}
          context: .
          file: ${{ steps.context.outputs.dockerfile }}
          labels: ${{ steps.container-metadata.outputs.labels }}
          platforms: ${{ steps.context.outputs.platform }}
          provenance: false
          push: ${{ inputs.enable-push }}
          sbom: false
          tags: ${{ steps.container-metadata.outputs.tags }}
      - name: install cosign
        if: inputs.enable-cosign == true && inputs.enable-push == true
        uses: sigstore/cosign-installer@v3.7.0
        # with:
        #   cosign-release: 'v2.1.1'
      - name: sign the docker image
        if: inputs.enable-cosign == true && inputs.enable-push == true
        env:
          DIGEST: ${{ steps.push.outputs.digest }}
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.container-metadata.outputs.tags }}
        run: |
          echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
      # - name: provenance
      #   if: inputs.enable-provenance-attestation == true && inputs.enable-push == true
      #   uses: actions/attest-build-provenance@v1
      #   with:
      #     push-to-registry: true
      #     subject-digest: ${{ steps.push.outputs.digest }}
      #     subject-name: ${{ steps.context.outputs.image }}
      - name: save digests
        if: inputs.enable-push == true
        env:
          DIGEST: ${{ steps.push.outputs.digest }}
        run: |
          mkdir -p /tmp/digests
          touch "/tmp/digests/${DIGEST#sha256:}"
      - name: upload digests
        if: inputs.enable-push == true
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: digests-${{ steps.context.outputs.name }}-${{ steps.context.outputs.platform-with-dash }}
          path: /tmp/digests/*
          retention-days: 1

  manifest:
    name: ${{ fromJSON(matrix.package).name }} manifest
    if: inputs.enable-push == true
    needs:
      - main
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJSON(needs.context.outputs.packages) }}
    steps:
      - name: context
        id: context
        env:
          NAME: ${{ fromJSON(matrix.package).name }}
          REPOSITORY_OWNER: ${{ github.repository_owner	}}
        run: |
          # platform pair (replace / with -)
          echo "name=${NAME}" >> "$GITHUB_OUTPUT"
          echo "image=ghcr.io/${REPOSITORY_OWNER}/${NAME}" >> "$GITHUB_OUTPUT"
      - name: download digests
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: /tmp/digests
          pattern: digests-${{ steps.context.outputs.name }}-*
      - name: container metadata
        id: container-metadata
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: ${{ inputs.annotations-levels }}
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=false
            prefix=
            suffix=
          images: ${{ steps.context.outputs.image }}
          tags: |
            type=match,pattern=v(.*),group=1,value=v${{ inputs.version }}
            type=match,pattern=v(\d.\d),group=1,enable=${{ startsWith(inputs.version, '0') == false && inputs.prerelease == false }},value=v${{ inputs.version }}
            type=match,pattern=v(\d),group=1,enable=${{ startsWith(inputs.version, '0') == false && inputs.prerelease == false }},value=v${{ inputs.version }}
            type=raw,value=latest,enable=${{ inputs.latest && inputs.prerelease == false }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          username: ${{ github.actor }}
      # adapted from https://docs.docker.com/build/ci/github-actions/multi-platform/
      - name: create manifest and push
        working-directory: /tmp/digests
        shell: bash
        env:
          ANNOTATIONS: ${{ steps.container-metadata.outputs.annotations }}
          IMAGE: ${{ steps.context.outputs.image }}
          TAGS: ${{ steps.container-metadata.outputs.tags }}
        run: |
          readarray -t lines <<< "$ANNOTATIONS"; annotations=(); for line in "${lines[@]}"; do annotations+=(--annotation "$line"); done
          readarray -t lines <<< "$TAGS"; tags=(); for line in "${lines[@]}"; do tags+=(-t "$line"); done
          docker buildx imagetools create \
          "${annotations[@]}" "${tags[@]}" $(printf "${IMAGE}@sha256:%s " *)
