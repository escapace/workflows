on:
  workflow_call:
    inputs:
      annotations-levels:
        default: index
        required: false
        type: string
      artifact-name:
        default: package
        description: 'artifact name'
        required: false
        type: string
      build-args:
        description: 'list of build-time variables'
        required: false
        type: string
      enable-cosign:
        default: false
        description: 'sign the resulting docker image(s)'
        required: false
        type: boolean
      enable-push:
        default: false
        description: 'push is a shorthand for --output=type=registry'
        required: false
        type: boolean
      enable-test:
        default: true
        description: 'run your tests when building the image'
        required: false
        type: boolean
      latest:
        description: 'add the latest tag'
        required: true
        type: boolean
      platforms:
        description: 'list of target platforms for build'
        required: false
        type: string
      prerelease:
        description: 'whether it is a prerelease'
        required: true
        type: boolean
      ref:
        required: true
        type: string
      version:
        required: true
        type: string
    # outputs:
    #   digest:
    #     description: 'image digest'
    #     value: ${{ jobs.main.outputs.digest }}
    #   image-id:
    #     description: 'image id'
    #     value: ${{ jobs.main.outputs.image-id }}
    #   metadata:
    #     description: 'build result metadata'
    #     value: ${{ jobs.main.outputs.metadata }}

# permissions:
#   packages: write
#   id-token: write

jobs:
  context:
    outputs:
      archive: ${{ steps.context.outputs.archive }}
      dockerfiles: ${{ steps.context.outputs.dockerfiles }}
      names: ${{ steps.context.outputs.names }}
    runs-on: ubuntu-latest
    steps:
      - name: download context archive
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
      - id: context
        name: extract context archive
        run: |
          archive=""

          readarray -t array < <(find "." -type f -name '*.tgz' -not -path '**/node_modules/**')

          while read -d '' -r file; do
            if tar -axOf "${file}" package/package.json package/pnpm-workspace.yaml &>/dev/null; then
              archive="${file}"
            fi
          done < <(find "." -type f -name '*.tgz' -not -path '**/node_modules/**' -print0 2>/dev/null)

          if [[ "${archive}" == "" ]]
          then
            while read -d '' -r file; do
              if [[ "$(tar -axOf "${file}" package/package.json | jq -r 'if .scripts["container:build"] | type == "string" then true else false end')" == "true" ]]; then
                archive="${file}"
              fi
            done < <(find "." -type f -name '*.tgz' -not -path '**/node_modules/**' -print0 2>/dev/null)
          fi

          echo "archive=${archive}" >> "$GITHUB_OUTPUT"

          tar -axf "${archive}"
          printf '%s\n' "${array[@]}" | xargs rm -f

          declare -A array=()

          while read -d '' -r file; do
            directory="$(dirname "$file")"

            if [[ -f "${directory}/package.json" &&
              -f "${directory}/Dockerfile" &&
              "$(jq -r 'if .scripts["container:build"] | type == "string" then true else false end' "$directory/package.json")" == "true" &&
              "$(jq -r 'if has("private") then .private else false end' "$directory/package.json")" == "true" &&
              "$(jq -r 'if .name | type == "string" and startswith("@container/") then true else false end' "$directory/package.json")" == "true" ]]; then
              name="$(jq -r '.name | sub("^@container/" ; "")' "${directory}/package.json")"
              dockerfile="${directory}/Dockerfile"
              array["${name}"]="${dockerfile}"
            fi
          done < <(find "." -type f -name 'package.json' -not -path '**/node_modules/**' -print0 2>/dev/null)

          keys=()
          values=()
          for key in "${!array[@]}"; do
            keys+=("$key")
            values+=("${array[$key]}")
          done

          if [ ${#keys[@]} -eq 0 ]; then
            echo "names=[]" >>"$GITHUB_OUTPUT"
          else
            echo "names=$(printf '%s\n' "${keys[@]}" | jq -R . | jq -sc .)" >>"$GITHUB_OUTPUT"
          fi

          if [ ${#values[@]} -eq 0 ]; then
            echo "dockerfiles=[]" >>"$GITHUB_OUTPUT"
          else
            echo "dockerfiles=$(printf '%s\n' "${values[@]}" | jq -R . | jq -sc .)" >>"$GITHUB_OUTPUT"
          fi
        shell: bash
  main:
    name: ${{ matrix.name }}
    needs:
      - context
    outputs:
      digest: ${{ steps.build-and-push.outputs.digest }}
      image-id: ${{ steps.build-and-push.outputs.imageid }}
      metadata: ${{ steps.build-and-push.outputs.metadata }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          ref: ${{ inputs.ref }}
      - env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: ${{ inputs.annotations-levels }}
        id: container-metadata
        name: container metadata
        uses: docker/metadata-action@v5
        with:
          context: git
          flavor: |
            latest=false
            prefix=
            suffix=
          images: ghcr.io/${{ github.repository_owner	}}/${{ matrix.name }}
          tags: |
            type=match,pattern=v(.*),group=1,value=v${{ inputs.version }}
            type=match,pattern=v(\d.\d),group=1,enable=${{ startsWith(inputs.version, '0') == false && inputs.prerelease == false }},value=v${{ inputs.version }}
            type=match,pattern=v(\d),group=1,enable=${{ startsWith(inputs.version, '0') == false && inputs.prerelease == false }},value=v${{ inputs.version }}
            type=raw,value=latest,enable=${{ inputs.latest && inputs.prerelease == false }}
      - env:
          WORKSPACE: ${{ github.workspace }}
        name: remove the checkout
        run: |
          rm -rf "${WORKSPACE}"
          mkdir -p "${WORKSPACE}"
        shell: bash
      - name: download context archive
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
      - env:
          ARCHIVE: ${{ matrix.archive }}
        name: extract context archive
        run: |
          readarray -t array < <(find . -type f -name '*.tgz')
          tar -xf "${ARCHIVE}"
          printf '%s\n' "${array[@]}" | xargs rm -f
        shell: bash
      - name: docker login
        uses: docker/login-action@v3
        with:
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          username: ${{ github.actor }}
      - name: setup qemu
        uses: docker/setup-qemu-action@v3
      - id: buildx
        name: docker buildx
        uses: docker/setup-buildx-action@v3
      - name: available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - uses: escapace/action-dockerfile-tools@v0.1.0
      - env:
          DOCKERFILE: ${{ matrix.dockerfile }}
        id: dockerfile
        run: |
          stages=$(dockerfile-tools list-stages --dockerfile "${DOCKERFILE}")

          if echo "$stages" | jq -e '.[] | select(. == "test")' > /dev/null; then
            echo "test=true" >> "$GITHUB_OUTPUT"
          else
            echo "test=false" >> "$GITHUB_OUTPUT"
          fi
        shell: bash
      - id: test
        if: fromJSON(steps.dockerfile.outputs.test) == true && inputs.enable-test == true
        name: test
        uses: docker/build-push-action@v5
        with:
          annotations: ${{ steps.container-metadata.outputs.annotations }}
          build-args: |
            CONTAINER_TEST=true
            ${{ inputs.build-args }}
          cache-from: |
            type=gha
          context: .
          file: ${{ matrix.dockerfile }}
          labels: ${{ steps.container-metadata.outputs.labels }}
          platforms: ${{ inputs.platforms }}
          provenance: false
          push: false
          sbom: false
          tags: ${{ steps.container-metadata.outputs.tags }}
          target: test
      - id: push
        if: inputs.enable-push == true
        name: (re)build and push
        uses: docker/build-push-action@v5
        with:
          annotations: ${{ steps.container-metadata.outputs.annotations }}
          build-args: ${{ inputs.build-args }}
          cache-from: |
            type=gha
          cache-to: |
            type=gha,mode=max
          context: .
          file: ${{ matrix.dockerfile }}
          labels: ${{ steps.container-metadata.outputs.labels }}
          platforms: ${{ inputs.platforms }}
          provenance: false
          push: ${{ inputs.enable-push }}
          sbom: false
          tags: ${{ steps.container-metadata.outputs.tags }}
      - if: inputs.enable-cosign == true && inputs.enable-push == true
        name: install cosign
        uses: sigstore/cosign-installer@v3.7.0
        # with:
        #   cosign-release: 'v2.1.1'
      - env:
          DIGEST: ${{ steps.push.outputs.digest }}
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.container-metadata.outputs.tags }}
        if: inputs.enable-cosign == true && inputs.enable-push == true
        name: sign the docker image
        run: |
          echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
      # adapted from https://docs.docker.com/build/ci/github-actions/multi-platform/
      - env:
          ANNOTATIONS: ${{ steps.container-metadata.outputs.annotations }}
          DIGEST: ${{ steps.push.outputs.digest }}
          TAGS: ${{ steps.container-metadata.outputs.tags }}
        if: inputs.enable-push == true
        name: create manifest list and push
        run: |
          readarray -t lines <<< "$ANNOTATIONS"; annotations=(); for line in "${lines[@]}"; do annotations+=(--annotation "$line"); done
          readarray -t lines <<< "$TAGS"; tags=(); for line in "${lines[@]}"; do tags+=(-t "$line"); done
          docker buildx imagetools create \
          "${annotations[@]}" "${tags[@]}" "ghcr.io/${GITHUB_REPOSITORY}@${DIGEST}"
        shell: bash
      # - if: inputs.enable-push == true
      #   name: attest
      #   uses: actions/attest-build-provenance@v1
      #   with:
      #     push-to-registry: true
      #     subject-digest: ${{ steps.push.outputs.digest }}
      #     subject-name: ghcr.io/${{ github.repository }}
    strategy:
      matrix:
        archive:
          - ${{ needs.context.outputs.archive }}
        dockerfile: ${{ fromJSON(needs.context.outputs.dockerfiles) }}
        name: ${{ fromJSON(needs.context.outputs.names) }}
